////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Назначение.Добавить("Документ.ИнвентаризацияТоваровНаСкладе");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Заполнить по остаткам на складе (с выбором счета)";
	НоваяКоманда.Идентификатор = "БПЗаполнениеОбъектаИнвентаризацияПоСчету";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	//НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыЗаполнениеФормы();
	//НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

//Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения,  ПараметрыВыполненияКоманды) Экспорт
//	
//	// Реализация логики команды по заполнению объекта
//	Если ИдентификаторКоманды = "ЗаполнитьПоОстаткамНаСкладеСчет1007" Тогда
//		
//		Если ПараметрыВыполненияКоманды.Свойство("ЭтаФорма") Тогда
//			
//			ЭтаФорма = ПараметрыВыполненияКоманды.ЭтаФорма;
//			ВходящиеПараметры = Новый Структура;
//			ВходящиеПараметры.Вставить("Склад", 				ЭтаФорма.Объект.Склад);
//			ВходящиеПараметры.Вставить("ОтветственноеЛицо", 	ЭтаФорма.Объект.ОтветственноеЛицо);
//			ВходящиеПараметры.Вставить("Дата", 					ЭтаФорма.Объект.Дата);
//			ВходящиеПараметры.Вставить("Организация", 			ЭтаФорма.Объект.Организация);
//			ВходящиеПараметры.Вставить("Контрагент");
//			
//			ДокументОбъект = ДанныеФормыВЗначение(ЭтаФорма.Объект, Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе"));
//			ДокументОбъект.Товары.Загрузить(ПолучитьОстаткиНаСкладе(ВходящиеПараметры));
//			ЗначениеВДанныеФормы(ДокументОбъект, ЭтаФорма.Объект);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВедетсяУчетПоФизлицам(Счет)

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоФизлицам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;

	Возврат УчетПоФизлицам;

КонецФункции 

Функция ПолучитьОстаткиНаСкладе(ВходящиеПараметры) Экспорт
	
	ОтветственноеЛицо 	= ВходящиеПараметры.ОтветственноеЛицо;
	Дата 				= ВходящиеПараметры.Дата;
	Организация 		= ВходящиеПараметры.Организация;
	Счет 				= ВходящиеПараметры.Счет;
	Склад 				= ВходящиеПараметры.Склад;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Количество", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	Товары.Колонки.Добавить("СчетУчета",  		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Товары.Колонки.Добавить("КоличествоУчет", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	Товары.Колонки.Добавить("СуммаУчет", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Товары.Колонки.Добавить("Сумма", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Товары.Колонки.Добавить("Цена", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	СписокСкладов = Новый Массив();
	Если ЗначениеЗаполнено(Склад) Тогда
		СписокСкладов.Добавить(Склад);
	Иначе
		ЗапросПоСкладам = Новый Запрос();
		ЗапросПоСкладам.УстановитьПараметр("МОЛ", ОтветственноеЛицо);
		ЗапросПоСкладам.УстановитьПараметр("КонецПериода",    Дата);
		ЗапросПоСкладам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&КонецПериода, ФизическоеЛицо = &МОЛ) КАК ОтветственныеЛицаСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница";
		
		Выборка   = ЗапросПоСкладам.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтруктурнаяЕдиница = NULL Тогда
				Продолжить;
			КонецЕсли;
			СписокСкладов.Добавить(Выборка.СтруктурнаяЕдиница);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Счет КАК Счет,
	               |	ХозрасчетныйОстатки.Счет.Порядок КАК Порядок,
	               |	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	               |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаВсего,
	               |	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК КоличествоВсего,
	               |	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура).Наименование
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ПорядокНаименование
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&КонецПериода,
	               |			Счет = &Счет,
	               |			,
	               |			Организация В (&Организация)
	               |				И ВЫБОР
	               |					КОГДА &Склад ЕСТЬ NULL 
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА Субконто2 ССЫЛКА Справочник.Склады
	               |								ТОГДА Субконто2 = &Склад
	               |							КОГДА Субконто3 ССЫЛКА Справочник.Склады
	               |								ТОГДА Субконто3 = &Склад
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &МОЛ ЕСТЬ NULL 
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА Субконто2 ССЫЛКА Справочник.ФизическиеЛица
	               |								ТОГДА Субконто2 = &МОЛ
	               |							КОГДА Субконто3 ССЫЛКА Справочник.ФизическиеЛица
	               |								ТОГДА Субконто3 = &МОЛ
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ) КАК ХозрасчетныйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстатки.Счет,
	               |	ХозрасчетныйОстатки.Счет.Порядок,
	               |	ХозрасчетныйОстатки.Субконто1,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура).Наименование
	               |		ИНАЧЕ """"
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ПорядокНаименование";
	
	Запрос.УстановитьПараметр("КонецПериода",	 	 Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",	     Организация);
	Запрос.УстановитьПараметр("Счет",	 			 Счет);
	Запрос.УстановитьПараметр("Склад",	 			 ?(ЗначениеЗаполнено(Склад), Склад, Null));
	Запрос.УстановитьПараметр("МОЛ",	 			 ?(ЗначениеЗаполнено(ОтветственноеЛицо), ОтветственноеЛицо, Null));
	
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ДатаДока  = Дата;

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТовары = Товары.Добавить();

		СтрокаТовары.Номенклатура     = Выборка.Номенклатура;
		СтрокаТовары.Количество       = Выборка.Количество;
		СтрокаТовары.СчетУчета	      = Выборка.Счет;
		СтрокаТовары.КоличествоУчет   = СтрокаТовары.Количество;

		Цена = ?(Выборка.КоличествоВсего = 0 ИЛИ Выборка.КоличествоВсего = NULL, 0, Выборка.СуммаВсего / Выборка.КоличествоВсего);
		
		СтрокаТовары.СуммаУчет        = Цена*Выборка.Количество;
		СтрокаТовары.Сумма            = СтрокаТовары.СуммаУчет;
		СтрокаТовары.Цена             = Цена;

	КонецЦикла;
	
	Возврат Товары;

КонецФункции
